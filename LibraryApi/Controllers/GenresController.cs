using LibraryApp.DataAccess;using LibraryApp.Models.Models;using Microsoft.AspNetCore.Http;using Microsoft.AspNetCore.Mvc;using Microsoft.EntityFrameworkCore;namespace LibraryApi.Controllers;[Route("api/[controller]")][ApiController]public class GenresController : ControllerBase
{    private readonly LibraryContext _db;    public GenresController(LibraryContext db) {        _db = db;
    }    [HttpGet]    [Route("getall")]    [ProducesResponseType(typeof(Genres), StatusCodes.Status200OK)]    [ProducesResponseType(StatusCodes.Status404NotFound)]    public async Task<IEnumerable<Genres>> GetAll() {        var allGenres = await _db.Genres.ToListAsync();        return allGenres;
    }    [HttpGet("id")]    [ProducesResponseType(typeof(Genres), StatusCodes.Status200OK)]    [ProducesResponseType(StatusCodes.Status404NotFound)]    public async Task<IActionResult> Get(int id) {        var genre = await _db.Genres.FindAsync(id);        if (genre == null)            return NotFound();        return Ok(genre);
    }    [HttpPost]    [Route("create")]    [ProducesResponseType(StatusCodes.Status201Created)]    public async Task<IActionResult> Create(Genres genre) {        await _db.Genres.AddAsync(genre);        await _db.SaveChangesAsync();        return CreatedAtAction(nameof(Get), new { id = genre.Id }, genre);
    }    [HttpPut]    [Route("{id}/update")]    [ProducesResponseType(typeof(Genres), StatusCodes.Status200OK)]    [ProducesResponseType(StatusCodes.Status404NotFound)]    public async Task<IActionResult> Update(int id) {        var genre = await _db.Genres.FindAsync(id);        if (genre == null)            return BadRequest();        _db.Genres.Update(genre);        await _db.SaveChangesAsync();        return NoContent();
    }    [HttpDelete]    [Route("{id}/delete")]    [ProducesResponseType(typeof(Genres), StatusCodes.Status200OK)]    [ProducesResponseType(StatusCodes.Status404NotFound)]    public async Task<IActionResult> Delete(int id) {        var genreToDelete = await _db.Genres.FindAsync(id);        if (genreToDelete == null)            return NotFound();        _db.Genres.Remove(genreToDelete);        await _db.SaveChangesAsync();        return NoContent();
    }
}